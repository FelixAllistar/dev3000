{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":["file:///Users/elsigh/src/elsigh/dev-playwright/mcp-server/app/api/logs/tail/route.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\nimport { readFileSync, existsSync } from 'fs';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const lines = parseInt(searchParams.get('lines') || '50');\n    const logPath = searchParams.get('logPath') || process.env.LOG_FILE_PATH || './ai-dev-tools/consolidated.log';\n    \n    if (!existsSync(logPath)) {\n      return Response.json({ error: 'Log file not found' }, { status: 404 });\n    }\n    \n    const logContent = readFileSync(logPath, 'utf-8');\n    const allLines = logContent.split('\\n').filter(line => line.trim());\n    const tailLines = allLines.slice(-lines);\n    \n    return Response.json({ \n      lines: tailLines,\n      total: allLines.length \n    });\n  } catch (error) {\n    return Response.json({ \n      error: error instanceof Error ? error.message : 'Unknown error' \n    }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;;AACA;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,QAAQ,SAAS,aAAa,GAAG,CAAC,YAAY;QACpD,MAAM,UAAU,aAAa,GAAG,CAAC,cAAc,QAAQ,GAAG,CAAC,aAAa,IAAI;QAE5E,IAAI,CAAC,IAAA,2GAAU,EAAC,UAAU;YACxB,OAAO,SAAS,IAAI,CAAC;gBAAE,OAAO;YAAqB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,MAAM,aAAa,IAAA,6GAAY,EAAC,SAAS;QACzC,MAAM,WAAW,WAAW,KAAK,CAAC,MAAM,MAAM,CAAC,CAAA,OAAQ,KAAK,IAAI;QAChE,MAAM,YAAY,SAAS,KAAK,CAAC,CAAC;QAElC,OAAO,SAAS,IAAI,CAAC;YACnB,OAAO;YACP,OAAO,SAAS,MAAM;QACxB;IACF,EAAE,OAAO,OAAO;QACd,OAAO,SAAS,IAAI,CAAC;YACnB,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}